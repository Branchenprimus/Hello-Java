Kommentar:

//    //Einzeilig
/*
*/    //Mehrzeilig


Operatoren:
+     //Summe aus a und b
%     //Restwert von b/a
++variable  //Präinkrement
variable++  //Postinkrement
--variable  //Prädekrement
variable--  //Postdekrement
==    //Gleich, a==b ergibt true, wenn a und b gleich sind, bei Referenztypen wird true angezeigt, wenn beide Werte auf das selbe Objekt zeigen
!=    //Ungleich, ergibt true, wenn a und b ungleich sind
<     //kleiner, ergibt true, wenn a kleiner als b ist
<=    //kleiner gleich""
>     //größer
>=    //größer gleich


Logische Operatoren:
!     //Logisches NICHT, !a ergibt true, wenn a false ist
&&    //Logisches UND, ergibt true, wenn alle Bedingungen true sind
||    //Logisches ODER, ergibt true, wenn eine der Bedingungen true ist (eine reicht aus)
^     //Exclusiv ODER, gibt true aus, wenn beide Ausdrücke einen unterschiedlichen Wert haben


Zuweisungsoperator:
=     //Einfache Zuweisung, a = b weist a den Wert von b zu
+=    //Additionszuweisung, a += b addiert a und b und weist a den wert von a+b zu
-=    //Subtraktionszuweisung
*=    //Multiplikationszuweisung
/=    //Divisionszuweisung


Datentypen:         //Sortiert nach größe
boolean boo = true;     //true oder false, 1 Byte
char character = 'a';   //16 Bit Unicode, 2 Byte
byte b = 1;             //-128 bis 127, 1 BYte
short sho = 2;          //-32768 bis 32767, 2 Byte
int integer = 1;        //-2^31 bis 2^31-1, 4 Byte
long longinteger = 10;  //-2^64 bis 2^64-1, 8 Byte
float floating = 1.5f;  //1,40239...E-45f bis 3,402823...E+38f, 4 Byte
double doub = 4.5;      //4,940656...E-324 bis 1,79769...E+308, 8 Byte

Array:
int [] a = new int[4];    //ein Array braucht min. einen Wert, der die länge bestimmt
int [][][] b = {{{1,2,3},{4,5,6}},{{7,8,9},{10,11,12}}};  //Mehrdimensional


Erweiterte for-Schleife:    //Um über jedes Element im Array zu Itterieren
int [] a = {1,2,3};
for (int i : a);
System.Out.Println(i);    //gibt die in i gespeicherten Elemente aus


Konstanten:
final double PI = 3.14159265; //kann nicht verändert werden


Typverkleinerung/vergrößerung:
double d = 1.5;
byte b = (byte) d;    //Typverkleinerung muss durch in Klammernsetzen des Gew. Datentyps explizit angegeben werden
byte b1 = 1;
double d1 = b1;       //Typvergrößerungen können ohne Probleme gemacht werden


Steuerzeichen in der Ausgabe:
System.Out.Println("" + a + "\n" + "\t");   


if-Anweisung:
if (z <= x){      //Es wird nach einem bool'schen Ausdruck gefragt
...
}
else{
...
}


switch-case-Anweisung:  //kann byte, short, char, int und Strings annehmen
int i = 1;

switch (i){
case 1:...; break; //Alle Anweisungen bis zum nächsten break werden ausgeführt
case 2:...; break;
default:...;
}


Schleifen:
for(int i =0;i<=10;i++){    //Schleifenanweisung wird ausgeführt, wenn chleifenbedingung true ist
                            //Es gilt for(init-Ausdruck;test-Ausdruck;Update){}
}


Scanner:
import java.util.Scanner;
Scanner scan = new Scanner(System.in);
int eingabe = scan.nextInt();           //es Kann jeder Datentyp eingelesen werden


JOptionPane:
import javax.swing.JOptionPane;
String eingabe = JOptionPane.showInputDialog(null,"Bitte eingabe","Hallo",JOptionPane.PLAIN_MESSAGE);

Zufallszahl:
import java.util.Random;
Random zahlengenerator = new Random();
int zufallszahl = zahlengenerator.nextInt(99)+1;    //um eine Zahl zwischen 1 und 99 zu erzeugen


Mathematik:
double d = Math.sqrt(x);    //gibt Wurzel aus x zurück
double d = Math.pow(x,y);   //berechnet x^y
long d = Math.max(x,y);     //liefert den größten Wert
long d = Math.min(x,y);     //liefert den kleinsten Wert
int i = Math.round(x);       //rundet x zur nächsten Ganzzahl


Methoden:
public static void methode1 (){}                                 // Methoden verlangt weder Eingabe- noch Rückgabewert
public static double methode2 (float floating, int integer){    // Methode hat zwei unterschiedliche eingabewerte und benötigt einen return-wert
return 1.5;}

public static void HalloWelt (float f, int i){}                 // Methoden sind überladen (name gleich, eingabewerte unterschiedlich
public static void Hallowelt (int i, float f){}


