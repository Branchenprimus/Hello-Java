import java.util.Arrays;
import java.util.ArrayList;

public class SortierAlgorithmen {
	 public static void main(String[] args) {
	  	       
	        int unsorted[] = new int[10000];
	        
	        ArrayList<Integer> unsortedArrayList = new ArrayList<Integer>();
	        for(int i = 0 ; i < 100000 ; i++) {
	        	unsortedArrayList.add(i);
	        }
	        java.util.Collections.shuffle(unsortedArrayList);
	        
	        for(int j = 0 ; j < unsorted.length ; j++) {
	        	unsorted[j] = unsortedArrayList.get(j);
	        }
	        
	        
	        System.out.println("Unsorted: " + Arrays.toString(unsorted));

	       
	        int[] selection = unsorted.clone();
	        long startTimeselectionSort = System.nanoTime();
	        selectionSort(selection);
	        long endTimeselectionSort = System.nanoTime();
	        long totalTimeselectionSort = endTimeselectionSort - startTimeselectionSort;
	      //  System.out.println("SelectionSort: " + Arrays.toString(selection));
	        System.out.println("This selectionSort took " + totalTimeselectionSort + " nanoseconds | ~" + totalTimeselectionSort / 1000000 + " milliseconds.");

	        int[] insertion = unsorted.clone();
	        long startTimeinsertionSort = System.nanoTime();
	        insertionSort(insertion);
	        long endTimeinsertionSort = System.nanoTime();
	        long totalTimeinsertionSort = endTimeinsertionSort - startTimeinsertionSort;
	     //   System.out.println("InsertionSort: " + Arrays.toString(insertion));
	        System.out.println("This insertionSort took " + totalTimeinsertionSort + " nanoseconds | ~" + totalTimeinsertionSort / 1000000 + " milliseconds.");

	        int[] quick = unsorted.clone();
	        long startTimequickSort = System.nanoTime();
	        quickSort(quick,0,quick.length-1);
	        long endTimequickSort = System.nanoTime();
	        long totalTimequickSort = endTimequickSort - startTimequickSort;
	      //  System.out.println("QuickSort: " + Arrays.toString(quick));
	        System.out.println("This quickSort took " + totalTimequickSort + " nanoseconds | ~" + totalTimequickSort / 1000000 + " milliseconds.");

	        int[] merge = unsorted.clone();
	        long startTimemergeSort = System.nanoTime();
	        mergeSort(merge,0,merge.length-1);
	        long endTimemergeSort = System.nanoTime();
	        long totalTimemergeSort = endTimemergeSort - startTimemergeSort;
	      //  System.out.println("MergeSort: " + Arrays.toString(merge));
	        System.out.println("This mergeSort took " + totalTimemergeSort + " nanoseconds | ~" + totalTimemergeSort / 1000000 + " milliseconds.");

	        int[] bubble = unsorted.clone();
	        long startTimebubbleSort = System.nanoTime();
	        bubbleSort(bubble);
	        long endTimebubbleSort = System.nanoTime();
	        long totalTimebubbleSort = endTimebubbleSort - startTimebubbleSort;
	       // System.out.println("BubbleSort: " + Arrays.toString(bubble));
	        System.out.println("This bubbleSort took " + totalTimebubbleSort + " nanoseconds | ~" + totalTimebubbleSort / 1000000 + " milliseconds.");
	        System.out.println("Ende");
	    }

	    public static void bubbleSort(int[] array) {
	        int laenge = array.length;
	        int temp;
	        for(int j = laenge - 1; j > 0; j--) {
	            for(int i = 0; i < j; i++) {
	                if(array[i] > array[i+1]) {
	                    temp = array[i+1];
	                    array[i+1] = array[i];
	                    array[i] = temp;
	                }
	            }
	        }
	    }

	    public static void selectionSort(int[] array) {
	        int laenge = array.length;
	        int temp = 0;
	        for(int j = 0; j < laenge; j++) {
	            int index = findeMinimum(array,j,laenge);
	            temp = array[j];
	            array[j] = array[index];
	            array[index] = temp;
	        }
	    }
	    private static int findeMinimum(int[] array, int anfang, int ende) {
	        int min = anfang;
	        for(int i = anfang + 1; i < ende; i++) {
	            if(array[i] < array[min])
	                min = i;
	        }
	        return min;
	    }

	    public static void insertionSort(int[] array) {
	        int laenge = array.length;
	        for(int j = 1; j < laenge; j++) {
	            if(array[j] < array[j-1]) {
	                int temp = array[j];
	                int i;
	                for(i = j; (i>0) && (array[i-1] > temp); i--) {
	                    array[i] = array[i-1];
	                }
	                array[i] = temp;
	            }
	        }
	    }

	    public static void quickSort(int[] array, int leftI, int rightI) {
	        if(leftI < rightI) {
	            int pivot = partition(array, leftI, rightI);
	            quickSort(array, leftI, pivot);
	            quickSort(array, pivot + 1, rightI);
	        }
	    }
	    private static int partition(int[] array, int leftI, int rightI) {
	        int x = array[(rightI-leftI) / 2 + leftI]; // Pivot-Element
	        int j = rightI;
	        int i = leftI;
	        while(true) {
	            while(array[j]>x)
	                j--;
	            while(array[i]<x)
	                i++;
	            if(i<j)
	                swap(array,i,j);
	            else
	                return j;
	        }
	    }
	    private static void swap(int[] array, int x, int y) {
	        int temp = array[x];
	        array[x] = array[y];
	        array[y] = temp;
	    }

	    public static void mergeSort(int[] array, int leftI, int rightI) {
	        if(leftI < rightI) {
	            int midI = (leftI+rightI+1) / 2;
	            mergeSort(array, leftI, midI-1);
	            mergeSort(array, midI, rightI);
	            merge(array, leftI, midI, rightI);
	        }
	    }
	    private static void merge(int[] array, int leftI, int midI, int rightI) {
	        int[] temp = new int[rightI-leftI+1];
	        for(int i = 0, j = leftI, k = midI; i < temp.length; i++) {
	            if(( k > rightI ) || (( j < midI ) && ( array[j] < array[k] ))) {
	                temp[i] = array[j];
	                j++;
	            } else {
	                temp[i] = array[k];
	                k++;
	            }
	        }
	        for(int n = 0; n < temp.length; n++) {
	            array[leftI+n] = temp[n];
	        }
	    }
	}

